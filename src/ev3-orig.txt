pub type Ev3Result<T> = Result<T, Ev3Error>;

pub enum Ev3Error {
    /// Internal error with error `msg`.
    InternalError {
        /// Original error message.
        msg: String,
    },
    /// No matching device found.
    NotFound,
    /// More than one matching device found.
    MultipleMatches,
}

impl From<std::io::Error> for Ev3Error {
    fn from(err: std::io::Error) -> Self {
        Ev3Error::InternalError {
            msg: format!("{}", err),
        }
    }
}

impl From<std::string::FromUtf8Error> for Ev3Error {
    fn from(err: std::string::FromUtf8Error) -> Self {
        Ev3Error::InternalError {
            msg: format!("{}", err),
        }
    }
}

impl From<std::num::ParseIntError> for Ev3Error {
    fn from(err: std::num::ParseIntError) -> Self {
        Ev3Error::InternalError {
            msg: format!("{}", err),
        }
    }
}

pub trait Port {
    /// Returns the name of the port.
    fn address(&self) -> String;
}

pub trait OrErr<T> {
    /// Consumes the `Option<T>` and returns an `Ev3Result<T>`.
    fn or_err(self) -> Ev3Result<T>;
}

impl<T> OrErr<T> for Option<T> {
    fn or_err(self) -> Ev3Result<T> {
        self.ok_or(Ev3Error::InternalError {
            msg: "Cannot unwrap option".to_owned(),
        })
    }
}

use std::cell::RefCell;
use std::rc::Rc;
use std::fs::File;
use std::os::unix::fs::PermissionsExt;

#[derive(Debug, Clone)]
pub struct Attribute {
    file: Rc<RefCell<File>>,
}

const ROOT_PATH: &str = "/sys/class/";

use std::io::{Read, Seek, SeekFrom, Write};
use std::fs::{self, OpenOptions};
use std::error::Error;
use std::os::unix::io::{AsRawFd, RawFd};

impl Attribute {
    /// Create a new `Attribute` instance that wrappes
    /// the file `/sys/class/{class_name}/{name}{attribute_name}`.
    pub fn new(class_name: &str, name: &str, attribute_name: &str) -> Ev3Result<Attribute> {
        let filename = format!("{}{}/{}/{}", ROOT_PATH, class_name, name, attribute_name);

        let stat = fs::metadata(&filename)?;

        let mode = stat.permissions().mode();

        let readable = mode & 256 == 256;
        let writeable = mode & 128 == 128;

        let file = OpenOptions::new()
            .read(readable)
            .write(writeable)
            .open(&filename)?;

        Ok(Attribute {
            file: Rc::new(RefCell::new(file)),
        })
    }

    /// Returns the current value of the wrapped file.
    fn get_str(&self) -> Ev3Result<String> {
        let mut value = String::new();
        let mut file = self.file.borrow_mut();
        file.seek(SeekFrom::Start(0))?;
        file.read_to_string(&mut value)?;
        Ok(value.trim_end().to_owned())
    }

    /// Sets the value of the wrapped file.
    /// Returns a `Ev3Result::InternalError` if the file is not writable.
    fn set_str(&self, value: &str) -> Ev3Result<()> {
        let mut file = self.file.borrow_mut();
        file.seek(SeekFrom::Start(0))?;
        file.write_all(value.as_bytes())?;
        Ok(())
    }

    /// Returns the current value of the wrapped file.
    /// The value is parsed to the type `T`.
    /// Returns a `Ev3Result::InternalError` if the current value is not parsable to type `T`.
    pub fn get<T>(&self) -> Ev3Result<T>
    where
        T: std::str::FromStr,
        <T as std::str::FromStr>::Err:Error,
    {
        let value = self.get_str()?;
        match value.parse::<T>() {
            Ok(value) => Ok(value),
            Err(e) => Err(Ev3Error::InternalError {
                msg: format!("{}", e),
            }),
        }
    }

    /// Sets the value of the wrapped file.
    /// The value is parsed from the type `T`.
    /// Returns a `Ev3Result::InternalError` if the file is not writable.
    pub fn set<T>(&self, value: T) -> Ev3Result<()>
    where
        T: std::string::ToString,
    {
        self.set_str(&value.to_string())
    }

    #[inline]
    /// Sets the value of the wrapped file.
    /// This function skips the string parsing of the `self.set<T>()` function.
    /// Returns a `Ev3Result::InternalError` if the file is not writable.
    pub fn set_str_slice(&self, value: &str) -> Ev3Result<()> {
        self.set_str(value)
    }

    /// Returns a string vector representation of the wrapped file.
    /// The file value is splitet at whitespaces.
    pub fn get_vec(&self) -> Ev3Result<Vec<String>> {
        let value = self.get_str()?;
        let vec = value
            .split_whitespace()
            .map(|word| word.to_owned())
            .collect();
        Ok(vec)
    }

    /// Returns a C pointer to the wrapped file.
    pub fn get_raw_fd(&self) -> RawFd {
        self.file.borrow().as_raw_fd()
    }
}

use libc;
use std::time::{Duration, Instant};

/// Wrapper for `libc::epoll_wait`
fn wait_file_changes(fd: RawFd, timeout: i32) -> bool {
    let mut buf: [libc::epoll_event; 10] = [libc::epoll_event { events: 0, u64: 0 }; 10];

    let result = unsafe {
        libc::epoll_wait(
            fd,
            buf.as_mut_ptr() as *mut libc::epoll_event,
            buf.len() as i32,
            timeout,
        ) as i32
    };

    result > 0
}

pub fn wait<F>(fd: RawFd, cond: F, timeout: Option<Duration>) -> bool
where
    F: Fn() -> bool,
{
    if cond() {
        return true;
    }

    let start = Instant::now();

    let mut t = timeout;

    loop {
        let wait_timeout = match t {
            Some(duration) => duration.as_millis() as i32,
            None => -1,
        };
        wait_file_changes(fd, wait_timeout);

        if let Some(duration) = timeout {
            let elapsed = start.elapsed();
            if elapsed >= duration {
                return false;
            }
            t = Some(duration - elapsed);
        }

        if cond() {
            return true;
        }
    }
}

pub const COMMAND_RUN_FOREVER: &str = "run-forever";
pub const COMMAND_RUN_TO_ABS_POS: &str = "run-to-abs-pos";
pub const COMMAND_RUN_TO_REL_POS: &str = "run-to-rel-pos";
pub const COMMAND_RUN_TIMED: &str = "run-timed";
pub const COMMAND_RUN_DIRECT: &str = "run-direct";
pub const COMMAND_STOP: &str = "stop";
pub const COMMAND_RESET: &str = "reset";
pub const POLARITY_NORMAL: &str = "normal";
pub const POLARITY_INVERSED: &str = "inversed";
pub const STATE_RUNNING: &str = "running";
pub const STATE_RAMPING: &str = "ramping";
pub const STATE_HOLDING: &str = "holding";
pub const STATE_OVERLOADED: &str = "overloaded";
pub const STATE_STALLED: &str = "stalled";
pub const STOP_ACTION_COAST: &str = "coast";
pub const STOP_ACTION_BRAKE: &str = "brake";
pub const STOP_ACTION_HOLD: &str = "hold";

pub trait TachoMotor: Motor {
    fn get_count_per_rot(&self) -> Ev3Result<i32> {
        self.get_attribute("count_per_rot").get()
    }

    fn get_count_per_m(&self) -> Ev3Result<i32> {
        self.get_attribute("count_per_m").get()
    }

    fn get_full_travel_count(&self) -> Ev3Result<i32> {
        self.get_attribute("full_travel_count").get()
    }

    fn get_duty_cycle(&self) -> Ev3Result<i32> {
        self.get_attribute("duty_cycle").get()
    }

    fn get_duty_cycle_sp(&self) -> Ev3Result<i32> {
        self.get_attribute("duty_cycle_sp").get()
    }

    fn set_duty_cycle_sp(&self, duty_cycle: i32) -> Ev3Result<()> {
        self.get_attribute("duty_cycle_sp").set(duty_cycle)
    }

    fn get_polarity(&self) -> Ev3Result<String> {
        self.get_attribute("polarity").get()
    }

    fn set_polarity(&self, polarity: &str) -> Ev3Result<()> {
        self.get_attribute("polarity").set_str_slice(polarity)
    }

    fn get_position(&self) -> Ev3Result<i32> {
        self.get_attribute("position").get()
    }

    fn set_position(&self, position: i32) -> Ev3Result<()> {
        self.get_attribute("position").set(position)
    }

    fn get_hold_pid_kp(&self) -> Ev3Result<f32> {
        self.get_attribute("hold_pid_kp").get()
    }

    fn set_hold_pid_kp(&self, kp: f32) -> Ev3Result<()> {
        self.get_attribute("hold_pid_kp").set(kp)
    }

    fn get_hold_pid_ki(&self) -> Ev3Result<f32> {
        self.get_attribute("hold_pid_ki").get()
    }

    fn set_hold_pid_ki(&self, ki: f32) -> Ev3Result<()> {
        self.get_attribute("hold_pid_ki").set(ki)
    }

    fn get_hold_pid_kd(&self) -> Ev3Result<f32> {
        self.get_attribute("hold_pid_kd").get()
    }

    fn set_hold_pid_kd(&self, kd: f32) -> Ev3Result<()> {
        self.get_attribute("hold_pid_kd").set(kd)
    }

    fn get_max_speed(&self) -> Ev3Result<i32> {
        self.get_attribute("max_speed").get()
    }

    fn get_position_sp(&self) -> Ev3Result<i32> {
        self.get_attribute("position_sp").get()
    }

    fn set_position_sp(&self, position_sp: i32) -> Ev3Result<()> {
        self.get_attribute("position_sp").set(position_sp)
    }

    fn get_speed(&self) -> Ev3Result<i32> {
        self.get_attribute("speed").get()
    }

    fn get_speed_sp(&self) -> Ev3Result<i32> {
        self.get_attribute("speed_sp").get()
    }

    fn set_speed_sp(&self, speed_sp: i32) -> Ev3Result<()> {
        self.get_attribute("speed_sp").set(speed_sp)
    }

    fn get_ramp_up_sp(&self) -> Ev3Result<i32> {
        self.get_attribute("ramp_up_sp").get()
    }

    fn set_ramp_up_sp(&self, ramp_up_sp: i32) -> Ev3Result<()> {
        self.get_attribute("ramp_up_sp").set(ramp_up_sp)
    }

    fn get_ramp_down_sp(&self) -> Ev3Result<i32> {
        self.get_attribute("ramp_down_sp").get()
    }

    fn set_ramp_down_sp(&self, ramp_down_sp: i32) -> Ev3Result<()> {
        self.get_attribute("ramp_down_sp").set(ramp_down_sp)
    }

    fn get_speed_pid_kp(&self) -> Ev3Result<f32> {
        self.get_attribute("speed_pid_kp").get()
    }

    fn set_speed_pid_kp(&self, kp: f32) -> Ev3Result<()> {
        self.get_attribute("speed_pid_kp").set(kp)
    }

    fn get_speed_pid_ki(&self) -> Ev3Result<f32> {
        self.get_attribute("speed_pid_ki").get()
    }

    fn set_speed_pid_ki(&self, ki: f32) -> Ev3Result<()> {
        self.get_attribute("speed_pid_ki").set(ki)
    }

    fn get_speed_pid_kd(&self) -> Ev3Result<f32> {
        self.get_attribute("speed_pid_kd").get()
    }

    fn set_speed_pid_kd(&self, kd: f32) -> Ev3Result<()> {
        self.get_attribute("speed_pid_kd").set(kd)
    }

    fn get_state(&self) -> Ev3Result<Vec<String>> {
        self.get_attribute("state").get_vec()
    }

    fn get_stop_action(&self) -> Ev3Result<String> {
        self.get_attribute("stop_action").get()
    }

    fn set_stop_action(&self, stop_action: &str) -> Ev3Result<()> {
        self.get_attribute("stop_action").set_str_slice(stop_action)
    }

    fn get_stop_actions(&self) -> Ev3Result<Vec<String>> {
        self.get_attribute("stop_actions").get_vec()
    }

    fn get_time_sp(&self) -> Ev3Result<i32> {
        self.get_attribute("time_sp").get()
    }

    fn set_time_sp(&self, time_sp: i32) -> Ev3Result<()> {
        self.get_attribute("time_sp").set(time_sp)
    }

    fn run_direct(&self) -> Ev3Result<()> {
        self.set_command(COMMAND_RUN_DIRECT)
    }

    fn run_forever(&self) -> Ev3Result<()> {
        self.set_command(COMMAND_RUN_FOREVER)
    }

    fn run_to_abs_pos(&self, position_sp: Option<i32>) -> Ev3Result<()> {
        if let Some(p) = position_sp {
            self.set_position_sp(p)?;
        }
        self.set_command(COMMAND_RUN_TO_ABS_POS)
    }

    fn run_to_rel_pos(&self, position_sp: Option<i32>) -> Ev3Result<()> {
        if let Some(p) = position_sp {
            self.set_position_sp(p)?;
        }
        self.set_command(COMMAND_RUN_TO_REL_POS)
    }

    fn run_timed(&self, time_sp: Option<Duration>) -> Ev3Result<()> {
        if let Some(duration) = time_sp {
            let p = duration.as_millis() as i32;
            self.set_time_sp(p)?;
        }
        self.set_command(COMMAND_RUN_TIMED)
    }

    fn stop(&self) -> Ev3Result<()> {
        self.set_command(COMMAND_STOP)
    }

    fn reset(&self) -> Ev3Result<()> {
        self.set_command(COMMAND_RESET)
    }

    fn is_running(&self) -> Ev3Result<bool> {
        Ok(self.get_state()?.iter().any(|state| state == STATE_RUNNING))
    }

    fn is_ramping(&self) -> Ev3Result<bool> {
        Ok(self.get_state()?.iter().any(|state| state == STATE_RAMPING))
    }

    fn is_holding(&self) -> Ev3Result<bool> {
        Ok(self.get_state()?.iter().any(|state| state == STATE_HOLDING))
    }

    fn is_overloaded(&self) -> Ev3Result<bool> {
        Ok(self
            .get_state()?
            .iter()
            .any(|state| state == STATE_OVERLOADED))
    }

    fn is_stalled(&self) -> Ev3Result<bool> {
        Ok(self.get_state()?.iter().any(|state| state == STATE_STALLED))
    }

    fn wait<F>(&self, cond: F, timeout: Option<Duration>) -> bool
    where
        F: Fn() -> bool,
    {
        let fd = self.get_attribute("state").get_raw_fd();
        wait(fd, cond, timeout)
    }

    fn wait_while(&self, state: &str, timeout: Option<Duration>) -> bool {
        let cond = || {
            self.get_state()
                .unwrap_or_else(|_| vec![])
                .iter()
                .all(|s| s != state)
        };
        self.wait(cond, timeout)
    }

    fn wait_until(&self, state: &str, timeout: Option<Duration>) -> bool {
        let cond = || {
            self.get_state()
                .unwrap_or_else(|_| vec![])
                .iter()
                .any(|s| s == state)
        };
        self.wait(cond, timeout)
    }

    fn wait_until_not_moving(&self, timeout: Option<Duration>) -> bool {
        self.wait_while(STATE_RUNNING, timeout)
    }
}

pub trait Motor: Device {}

/// EV3 ports `outA` to `outD`
#[derive(Debug, Copy, Clone)]
pub enum MotorPort {
    /// EV3 `outA` port
    OutA,
    /// EV3 `outB` port
    OutB,
    /// EV3 `outC` port
    OutC,
    /// EV3 `outD` port
    OutD,
}

impl Port for MotorPort {
    fn address(&self) -> String {
        match self {
            MotorPort::OutA => "outA".to_owned(),
            MotorPort::OutB => "outB".to_owned(),
            MotorPort::OutC => "outC".to_owned(),
            MotorPort::OutD => "outD".to_owned(),
        }
    }
}

pub trait Findable<PortType>
where
    Self: std::marker::Sized,
    Self: Device,
    PortType: Port,
{
    /// Extract list of connected 'Self'
    fn list() -> Ev3Result<Vec<Self>>;

    /// Try to get a `Self` on the given port. Returns `None` if port is not used or another device is connected.
    fn get(port: PortType) -> Ev3Result<Self>;

    /// Try to find a `Self`. Only returns a motor if their is exactly one connected, `Error::NotFound` otherwise.
    fn find() -> Ev3Result<Self>;
}

pub trait Device {
    /// Returns the attribute wrapper for an attribute name.
    fn get_attribute(&self, name: &str) -> Attribute;

    /// Returns the name of the port that the motor is connected to.
    fn get_address(&self) -> Ev3Result<String> {
        self.get_attribute("address").get()
    }

    /// Sends a command to the device controller.
    fn set_command(&self, command: &str) -> Ev3Result<()> {
        self.get_attribute("command").set_str_slice(command)
    }

    /// Returns a space separated list of commands that are supported by the device controller.
    fn get_commands(&self) -> Ev3Result<Vec<String>> {
        self.get_attribute("commands").get_vec()
    }

    /// Returns the name of the driver that provides this device.
    fn get_driver_name(&self) -> Ev3Result<String> {
        self.get_attribute("driver_name").get()
    }
}

use std::collections::HashMap;
use std::fmt::{self, Debug};
use std::string::String;

pub struct Driver {
    class_name: String,
    name: String,
    attributes: RefCell<HashMap<String, Attribute>>,
}

impl Driver {
    /// Returns a new `Driver`.
    /// All attributes created by this driver will use the path `/sys/class/{class_name}/{name}`.
    pub fn new(class_name: &str, name: &str) -> Driver {
        Driver {
            class_name: class_name.to_owned(),
            name: name.to_owned(),
            attributes: RefCell::new(HashMap::new()),
        }
    }

    /// Returns the name of the device with the given `class_name`, `driver_name` and at the given `port`.
    ///
    /// Returns `Ev3Error::NotFound` if no such device exists.
    pub fn find_name_by_port_and_driver(
        class_name: &str,
        port: &dyn Port,
        driver_name: &str,
    ) -> Ev3Result<String> {
        let port_address = port.address();

        let paths = fs::read_dir(format!("{}{}", ROOT_PATH, class_name))?;

        for path in paths {
            let file_name = path?.file_name();
            let name = file_name.to_str().or_err()?;

            let address = Attribute::new(class_name, name, "address")?;

            if address.get::<String>()?.contains(&port_address) {
                let driver = Attribute::new(class_name, name, "driver_name")?;

                if driver.get::<String>()? == driver_name {
                    return Ok(name.to_owned());
                }
            }
        }

        Err(Ev3Error::NotFound)
    }

    /// Returns the name of the device with the given `class_name` and at the given `port`.
    ///
    /// Returns `Ev3Error::NotFound` if no such device exists.
    /// Returns `Ev3Error::MultipleMatches` if more then one matching device exists.
    pub fn find_name_by_port(class_name: &str, port: &dyn Port) -> Ev3Result<String> {
        let port_address = port.address();

        let paths = fs::read_dir(format!("{}{}", ROOT_PATH, class_name))?;

        for path in paths {
            let file_name = path?.file_name();
            let name = file_name.to_str().or_err()?;

            let address = Attribute::new(class_name, name, "address")?;

            if address.get::<String>()?.contains(&port_address) {
                return Ok(name.to_owned());
            }
        }

        Err(Ev3Error::NotFound)
    }

    /// Returns the name of the device with the given `class_name`.
    ///
    /// Returns `Ev3Error::NotFound` if no such device exists.
    /// Returns `Ev3Error::MultipleMatches` if more then one matching device exists.
    pub fn find_name_by_driver(class_name: &str, driver_name: &str) -> Ev3Result<String> {
        let mut names = Driver::find_names_by_driver(class_name, driver_name)?;

        match names.len() {
            0 => Err(Ev3Error::NotFound),
            1 => Ok(names
                .pop()
                .expect("Name vector contains exactly one element")),
            _ => Err(Ev3Error::MultipleMatches),
        }
    }

    /// Returns the names of the devices with the given `class_name`.
    pub fn find_names_by_driver(class_name: &str, driver_name: &str) -> Ev3Result<Vec<String>> {
        let paths = fs::read_dir(format!("{}{}", ROOT_PATH, class_name))?;

        let mut found_names = Vec::new();
        for path in paths {
            let file_name = path?.file_name();
            let name = file_name.to_str().or_err()?;

            let driver = Attribute::new(class_name, name, "driver_name")?;

            if driver.get::<String>()? == driver_name {
                found_names.push(name.to_owned());
            }
        }

        Ok(found_names)
    }

    /// Return the `Attribute` wrapper for the given `attribute_name`.
    /// Creates a new one if it does not exist.
    pub fn get_attribute(&self, attribute_name: &str) -> Attribute {
        let mut attributes = self.attributes.borrow_mut();

        if !attributes.contains_key(attribute_name) {
            if let Ok(v) =
                Attribute::new(self.class_name.as_ref(), self.name.as_ref(), attribute_name)
            {
                attributes.insert(attribute_name.to_owned(), v);
            };
        };

        attributes
            .get(attribute_name)
            .expect("Internal error in the attribute map")
            .clone()
    }
}

impl Clone for Driver {
    fn clone(&self) -> Self {
        Driver {
            class_name: self.class_name.clone(),
            name: self.name.clone(),
            attributes: RefCell::new(HashMap::new()),
        }
    }
}

impl Debug for Driver {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Driver {{ class_name: {}, name: {} }}",
            self.class_name, self.name
        )
    }
}